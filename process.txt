OnlineProgrammingLab

-----------------------------------------------------------------------------
1-Starting Project
--------------------------------------------------------------------------------

Python 3.9 is being used, Pycharm IDE
Project,Virtual Environment is created and then django is installed
" pip install django "

Use "django-admin" to check if django is installed, it should give the list of commands.

Now to create django project -- " django-admin startproject OnlineProgrammingLab . "
In the command '.' is used to remove redundancy as django creates folder inside folder by default
This will create manage.py and OnlineProgrammingLab folder

manage.py is the wrapper around django-admin so from now on we use manage.py inplace of django-admin
so because of this we use " python manage.py runserver " to run the project instead of
" django-admin runserver "

Once we run the command we get http://127.0.0.1:8000 where the website is running , we should see the
django default page

----------------------------------------------------------------------------------
2-app creation and urls.py config and simple views creation
---------------------------------------------------------------------------------

To create an app inside django-project we use
" python manage.py startapp APP_NAME "
Now to connect this app to our django project we go settings.py and add our app there
i.e in INSTALLED_APPS we add new enter 'base.apps.BaseConfig' or simply 'base'

Now we create an urls.py for our app as we cannot call our views from the project urls.py

Simple View Example:
                        def home(request):
                            return HttpResponse("Home Page")
this view is triggered at starting so we add to base/url.py
                        path('', views.home, name="home"),

we write functions in views which are triggered by urls -- These urls config is present in base/urls.py
now we config the base/urls.py to the project-urls.py
To do this we add
" path('',include('base.urls')), " to the project-urls.py

Everytime we add a view we should add corresponding url to base/urls.py
and everytime we create new app that app.urls should be included into the project-urls.py


-----------------------------------------------------------------
3-Adding Templates -- Html files
-----------------------------------------------------------------
create a folder to store all html files
(we created it as templates)
for django to know about this templates folder we goto projects/settings.py and in TEMPLATES>DIR we add
path to this folder
" BASE_DIR / "templates" " inside square brackets of DIR

create the html file a/c to need. Here first we are creating home.html

and in views to trigger these templates we use render(request,"home.html")



------------------------------------------------------------------
4-Template Inheritence
-----------------------------------------------------------------
Lets us create a parent template which will act as a wrapper for all the other templates
created -- "main.html" which will act as parent

Once created we create blocks in main.html . these blocks act as placeholders

Example in body of main.html we add
{% block content %}

{% end block %}

So now we can home.html will simply become
        {% extends 'main.html' %}   --- extends feature
        {% block content %}
            <h1>HOME PAGE</h1>
        {% endblock %}

There is also a include feature. For example navbar.html can be created seperately and included into
main.html using  {% include 'navbar.html' %}

----------------------------------------------------------------------
5-Template Variables,tags
---------------------------------------------------------------------
To add variables we use {{ variable_name }}

to use code in html we use {%   %}

----------------------------------------------------------------------
6-Authentication
-----------------------------------------------------------------------
To create superuser we use " python manage.py createsuperuser "
apply makemigrations and migrate if any error

A new app authentication is created to deal with all the login/signup stuff
as we created a new app configure urls and other as mentioned above(2)

views,urls and templates are created for auth-app

----------------------------------------------------------------------
7-Login Page and Signup Basic
-------------------------------------------------------------------------
Login Page -- https://codepen.io/ModernProject/pen/MMJPBr

htmls are added in templates folder
css are added in static folder (Images are also added in static)

To configure static folder we go to settings and add
STATICFILES_DIRS=[
    os.path.join(BASE_DIR,'static'),
]

now to link stylesheet we load static first and then link the css . it looks like this

{% load static %}
  <link rel="stylesheet" href="{% static 'YOUR_STYLESHEET_PATH_HERE' %}">

{% load static %}
<link rel="stylesheet" href="{% static 'css/styles_login.css' %}">

{% load static %}
<img src="{% static 'images/login.png' %}">

and restart the server to see changes

---------------------------------------------------------------------------------

8-PIP FREEZE REQUIREMENTS
-------------------------------------------------------------------------------
pip freeze > requirements.txt


----------------------------------------------------------------------------------
9- Login Process
-------------------------------------------------------------------------------------
Following GFG tutorial
https://www.youtube.com/watch?v=1UvTNMH7zDo


---------------------------------------------------------------------------------
10. Models (Databases Tables)
-------------------------------------------------------------------------------

Each table is a python class
Example:  class Table(models.Model):
and attributes of the table will look like this

class Table(models.Model):
    attribute1=models.CharField();
    attribute2=models.CharField();
    attribute3=models.CharField();

After a new model is built we habe to perform migrations

python manage.py makemigrations
python manage.py migrate

We also need to register the Model in admin.py file

from .models import Room
admin.site.register(Room)

Django provides a model manager to manage the queries that are to be performed on the MODELS

queryset=ModelName.objects.all()                          ----> complete model
                          .get(attribute='value')         ----> single
                          .filter(attribute='value')
                          .filter(attribute__startswith='value')
                          .filter(attribute__contains='value')     etc;
                          .exclude()
                          .filter().order_by('value1','value2')

---------------------------------------------------------------------------------------------
11- Bootstrap
------------------------------------------------------------------------------------------
Bootstrap v5.1 CDN added in main.html


-------------------------------------------------------------------------------------------
12- FrontEnd-HomePage
------------------------------------------------------------------------------------------

Navbar created using bootstrap

---------------------------------------------------------------------------------------------
13- FORM creation CRUD
------------------------------------------------------------------------------------------------
using function based forms here(MODEL FORMS)

CRUD operations are achieved using the model forms of django

create_question Form is added but it needs to be changed
----------------------------------------------------------------------------------------------
14- Search Room Feature by name,host etc
---------------------------------------------------------------------------------------------
Search done but not by host only name of room


---------------------------------------------------------------------------------------------
15- Restrict Pages
------------------------------------------------------------------------------------------

@login_required decarator is used to acheive restriction to pages that need login

-----------------------------------------------------------------------------------------
16- CSS for home,room and question.html
---------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
17- Compiler addition and submission
------------------------------------------------------------------------------------------
Added form for solution at present (Should be only code present)

-------------------------------------------------------------------------------------------


18-- Clearing database
migrate app_name zero and then migrate.

-------------------------------------------------------------------------------------------